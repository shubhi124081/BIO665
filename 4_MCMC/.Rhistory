xlim(c(0,1)) + ylim(c(-1,1)) +
xlab('p') + ylab('f') +
geom_line(data=df2, aes(x=df2$pseq, y=df2$minf.pseq.), color='black') +
scale_color_manual(values = cols)
p2 <- as.vector(fgibbs[-c(1:100),]) #without burnin
mydata[[i]] <- list(n=popsizes[i],
p1=p1,
p2=p2,
y=y)
}
#----------------------------------------------------------------------------
## QUESTION 3
form  <- as.formula(cones ~ nfert*trt + diam)
X     <- model.matrix(form, data=treedata)
Y     <- model.frame(form, data=treedata)$cones
p     <- ncol(X)
n     <- nrow(X)
bg <- priorB <- matrix(0,p)
xnames <- colnames(X)
rownames(bg) <- xnames
priorVB <- diag(p)*1000
hi <- bg + 100                                # big enough to not matter
lo <- -hi
lo[xnames %in% c('nfert','trt','diam')] <- 0  # positive main effects
cmat    <- .1*solve(crossprod(X))
ng     <- 10000
bgibbs <- matrix(NA,ng,p)  #for regression parameters
colnames(bgibbs) <- colnames(X)
accept <- 0
cupdate <- c(200, 500, 1000, 2000)
accept  <- 0
for(g in 1:ng){
tmp <- updateBetaGLM(bg, cmat, X, Y, likelihood='dpois',
link='log', priorB = priorB, priorVB = priorVB,
lo = lo, hi = hi)
bgibbs[g,] <- bg <- tmp$beta
accept     <- accept + tmp$accept
if(g %in% cupdate){
cmat <- .1*var(bgibbs[1:(g-1),])  #adapt proposal
diag(cmat) <- diag(cmat)*1.001
}
}
#----------------------------------------------------------------------------
## QUESTION 4
# Plot params
colT <- colorRampPalette( c('#e5f5e0', '#a1d99b', '#31a354') )
cols <- colT(10)
# Data params
popsizes <- rep(c(5, 10, 20),2) #population sizes
npop <- 20               #no. populations
p  <- 0.6                #frequency of allele a
f  <- c(-.2, .2)         #inbreeding coefficient
# Gibbs params
g1 <- g2 <- 1   #beta shape params
priorF   <- 0   #mean and sd for f
priorFSD <- 1
ng     <- 5000
nchain <- 10
nt     <- 500
# Beta chains
mydata <- list(n1=list(), n2=list(), n3=list())
for (i in 1:len(popsizes)) {
if (i-4 < 0) {
inb.tx <- "negative inbreeding"
fg <- f[1]
} else {
inb.tx <- "positive inbreeding"
fg <- f[2] #positive inbreeding
}
# Create data
pr <- pmake(c(p ,fg))     #values for (Paa,Pab,Pbb)
y <-  rmultinom(npop, popsizes[i], pr)
# Reset chains
thin   <- round(seq(1, ng, length=nt))
pgibbs <- matrix(0,nt,nchain)
fgibbs <- pgibbs
# Run sampler
for(j in 1:nchain){
k <- 0                # count variable
pg <- rbeta(1,g1,g2)  # draw initial values from prior
lg <- minf(pg)        # lower limit for f
fg <- .tnorm(1,lg,1,priorF,priorFSD) # random draw for f
for(g in 1:ng){
pf <- update_pf()   #from clarkfunctions2020.R
pg <- pf$pg
fg <- pf$fg
if(g %in% thin){
k <- k + 1
pgibbs[k,j] <- pg
fgibbs[k,j] <- fg
}
}
}
# Graph of joint
pseq <- seq(.01,.99,length=100)
df1 <- data.frame(run   = as.factor(melt(pgibbs)$Var2),
pgibbs = melt(pgibbs)$value,
fgibbs = melt(fgibbs)$value)
df2 <- data.frame(pseq,minf(pseq))
p1 <- ggplot(data=df1, aes(x=pgibbs, y=fgibbs, color=run), alpha=0.5) +
geom_point() + ggtitle(paste0('Beta Chains for n=', popsizes[i], " with ", inb.tx)) +
xlim(c(0,1)) + ylim(c(-1,1)) +
xlab('p') + ylab('f') +
geom_line(data=df2, aes(x=df2$pseq, y=df2$minf.pseq.), color='black') +
scale_color_manual(values = cols)
p2 <- as.vector(fgibbs[-c(1:100),]) #without burnin
mydata[[i]] <- list(n=popsizes[i],
p1=p1,
p2=p2,
y=y)
}
# Negative
mydata[[1]]$p1
mydata[[2]]$p1
mydata[[3]]$p1
# Positive
mydata[[4]]$p1
mydata[[5]]$p1
mydata[[6]]$p1
# Negative
par(mf=c(3,2))
mydata[[1]]$p1
mydata[[4]]$p1
mydata[[2]]$p1
mydata[[5]]$p1
mydata[[3]]$p1
mydata[[6]]$p1
?par
par(mfrow=c(3,2))
mydata[[1]]$p1
mydata[[4]]$p1
mydata[[2]]$p1
mydata[[5]]$p1
mydata[[3]]$p1
mydata[[6]]$p1
?grid
?grid.arrange()
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo = FALSE, eval=TRUE)
library(ggplot2)
library(grid)
library(gridExtra)
library(reshape2)
library(gtable)
library(rjags)
source('../clarkfunctions2020.R')
Rcpp::sourceCpp('../cppFns.cpp')
treedata <- read.table('FACEtrees.txt',header=T)
#----------------------------------------------------------------------------
# FUNCTIONS
len <- function(k) length(k)
getMu <- function(sigma, y, M, m){ # conditional distributions
n <- length(y)
V <- 1/( n/sigma + 1/M )
v <- sum(y)/sigma + m/M
rnorm(1, V*v, sqrt(V))
}
getSigma <- function(mu, y, s1, s2){
n  <- length(y)
u1 <- s1 + n/2
u2 <- s2 + 1/2*sum( (y - mu)^2 )
1/rgamma(1, u1, u2)
}
plotFn <- function(normal = str2, trunNorm = bgibbs, ng = 1e4, burnin = NULL){
par(mfrow = c(3, 2))
if(is.null(burnin)){
for(index in 1:ncol(normal)){
plot(normal[, index], type = "l", col = "red",
ylim = c(min(min(normal[,index]), min(trunNorm[,index])),
max(max(normal[,index]), max(trunNorm[,index]))),
main = colnames(trunNorm)[index])
lines(trunNorm[, index], col = "black")}
}
else{
for(index in 1:ncol(normal)){
plot(normal[burnin:ng, index], type = "l", col = "red",
ylim = c(min(min(normal[burnin:ng,index]), min(trunNorm[burnin:ng,index])),
max(max(normal[burnin:ng,index]), max(trunNorm[burnin:ng,index]))),
main = colnames(trunNorm)[index])
lines(trunNorm[burnin:ng, index], col = "black")}
}
}
# Negative
g1 <- mydata[[1]]$p1; g2 <- mydata[[2]]$p1; g3 <- mydata[[3]]$p1
# Positive
g4 <- mydata[[4]]$p1; g5 <- mydata[[5]]$p1; g6 <- mydata[[6]]$p1
marrangeGrob(g1, g4, g2, g5, g3, g6, nrow=3, ncol=2)
# Plot params
colT <- colorRampPalette( c('#e5f5e0', '#a1d99b', '#31a354') )
cols <- colT(10)
# Data params
popsizes <- rep(c(5, 10, 20),2) #population sizes
npop <- 20               #no. populations
p  <- 0.6                #frequency of allele a
f  <- c(-.2, .2)         #inbreeding coefficient
# Gibbs params
g1 <- g2 <- 1   #beta shape params
priorF   <- 0   #mean and sd for f
priorFSD <- 1
ng     <- 5000
nchain <- 10
nt     <- 500
# Beta chains
mydata <- list(n1=list(), n2=list(), n3=list())
for (i in 1:len(popsizes)) {
if (i-4 < 0) {
inb.tx <- "negative inbreeding"
fg <- f[1]
} else {
inb.tx <- "positive inbreeding"
fg <- f[2] #positive inbreeding
}
# Create data
pr <- pmake(c(p ,fg))     #values for (Paa,Pab,Pbb)
y <-  rmultinom(npop, popsizes[i], pr)
# Reset chains
thin   <- round(seq(1, ng, length=nt))
pgibbs <- matrix(0,nt,nchain)
fgibbs <- pgibbs
# Run sampler
for(j in 1:nchain){
k <- 0                # count variable
pg <- rbeta(1,g1,g2)  # draw initial values from prior
lg <- minf(pg)        # lower limit for f
fg <- .tnorm(1,lg,1,priorF,priorFSD) # random draw for f
for(g in 1:ng){
pf <- update_pf()   #from clarkfunctions2020.R
pg <- pf$pg
fg <- pf$fg
if(g %in% thin){
k <- k + 1
pgibbs[k,j] <- pg
fgibbs[k,j] <- fg
}
}
}
# Graph of joint
pseq <- seq(.01,.99,length=100)
df1 <- data.frame(run   = as.factor(melt(pgibbs)$Var2),
pgibbs = melt(pgibbs)$value,
fgibbs = melt(fgibbs)$value)
df2 <- data.frame(pseq,minf(pseq))
p1 <- ggplot(data=df1, aes(x=pgibbs, y=fgibbs, color=run), alpha=0.5) +
geom_point() + ggtitle(paste0('Beta Chains for n=', popsizes[i], " with ", inb.tx)) +
xlim(c(0,1)) + ylim(c(-1,1)) +
xlab('p') + ylab('f') +
geom_line(data=df2, aes(x=df2$pseq, y=df2$minf.pseq.), color='black') +
scale_color_manual(values = cols)
p2 <- as.vector(fgibbs[-c(1:100),]) #without burnin
mydata[[i]] <- list(n=popsizes[i],
p1=p1,
p2=p2,
y=y)
}
# Negative
g1 <- mydata[[1]]$p1; g2 <- mydata[[2]]$p1; g3 <- mydata[[3]]$p1
# Positive
g4 <- mydata[[4]]$p1; g5 <- mydata[[5]]$p1; g6 <- mydata[[6]]$p1
marrangeGrob(g1, g4, g2, g5, g3, g6, nrow=3, ncol=2)
# Negative
g1 <- ggplotGrob(mydata[[1]]$p1); g2 <- ggplotGrob(mydata[[2]]$p1); g3 <- ggplotGrob(mydata[[3]]$p1)
# Negative
g1 <- ggplotGrob(mydata[[1]]$p1); g2 <- ggplotGrob(mydata[[2]]$p1); g3 <- ggplotGrob(mydata[[3]]$p1)
# Positive
g4 <- ggplotGrob(mydata[[4]]$p1); g5 <- ggplotGrob(mydata[[5]]$p1); g6 <- ggplotGrob(mydata[[6]]$p1)
grid.arrange(g1, g4, g2, g5, g3, g6, nrow=3, ncol=2)
getwd()
list.files('../')
list.files()
load('maggieSwiftData.RData)
load('maggieSwiftData.RData')
names(xdata)
dim(xdata)
dim(ydata)
head(edata)
head(xdata)
unique(xdata$grid)
match(unique(xdata$grid), xdata$grid)
inx <- match(unique(xdata$grid), xdata$grid)
knitr::kable( edata[inx,1:23], caption = "EDATA", digits=2)
knitr::kable( edata[inx,1:15], caption = "EDATA", digits=2)
codes <- read.table('Eas_Codes.txt', header=TRUE)
codes <- read.table('Eas_Codes.txt', header=TRUE)
codes <- read.table('Eas_Codes.txt', header=TRUE)
list.files()
codes <- read.table('Eas_Codes.txt', header=TRUE)
codes <- read.csv('Eas_Codes.csv', header=TRUE)
codes
nrow(codes)
df <- rbind(codes[1:20,], codes[21:40,], codes[40:45,])
df
df <- cbind(codes[1:20,], codes[21:40,], codes[40:45,])
rbind(codes[40:45,], rep(c(0,0), 15)
rep(c(0,0), 15))
rep(c(0,0), 15))
rbind(codes[40:45,], rep(c(0,0), 15))
rep(c(0,0), 15)
rbind(codes[40:45,], rep(c(0,0), 15))
matrix(codes[40:45,], nrow=20, ncol=2)
rep(c(0,0), 15)
rbind(codes[40:45,], matrix(0, nrow=15, ncol=2))
as.data.frame(matrix(0, nrow=15, ncol=2)))
codes[40:45,]
codes <- read.csv('Eas_Codes.csv', header=TRUE)
df <- cbind(codes[1:23,], codes[24:46,])
df
b
knitr::kable( codes, caption = "Species codes", digits=2)
knitr::kable( df, caption = "Species codes", digits=2)
dim(ydata)
# Metropolis algorithm
n <- 100
nrep <- 1000
ntimes <- 10
lambda <- 3
# Let's run this a couple of times to compare.
Lcur.df <- data.frame(OriginalLambda = rep(0, ntimes),
MetropolisLambda = rep(0, ntimes),
DistanceFromOriginal = rep(0,ntimes))
i=1
j=1
Lcur <- runif(1, 0, 10)
y <- rpois(n, lambda)
Lcur
# Propose a new lambda
Lstar <- .tnorm(1, 0, 10, mu=Lcur, sig=2)
Lstar
# Find probability of each lambda given y
num   <- prod(dpois(y, Lstar) * dunif(Lstar, 0, 10))
num
log(num)
log(prod(dpois(y, Lcur ) * dunif(Lcur, 0, 10)))
# Find probability of each lambda given y
num   <- log(prod(dpois(y, Lstar) * dunif(Lstar, 0, 10)))
denom <- log(prod(dpois(y, Lcur ) * dunif(Lcur, 0, 10)))
ratio <- exp(num - denom)
ratio
ratio
# Metropolis algorithm
n <- 100
nrep <- 1000
ntimes <- 10
lambda <- 3
# Let's run this a couple of times to compare.
Lcur.df <- data.frame(OriginalLambda = rep(0, ntimes),
MetropolisLambda = rep(0, ntimes),
DistanceFromOriginal = rep(0,ntimes))
for (i in 1:ntimes) {
Lcur <- runif(1, 0, 10)
y <- rpois(n, lambda)
# Loop over a number of repetitions
for (j in 1:nrep) {
# Propose a new lambda
Lstar <- .tnorm(1, 0, 10, mu=Lcur, sig=2)
# Find probability of each lambda given y
num   <- log(prod(dpois(y, Lstar) * dunif(Lstar, 0, 10)))
denom <- log(prod(dpois(y, Lcur ) * dunif(Lcur, 0, 10)))
ratio <- exp(num - denom)
# Accept or reject:
u <- runif(1, 0, 1)
if (u < ratio) Lcur <- Lstar
}
# Save
Lcur.df[i,] <- c(lambda, Lcur, abs(Lcur - lambda))
}
knitr::kable( Lcur.df, caption = "Summary for ten runs of Metropolis algorithm", digits=2)
ratio
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo = FALSE, eval=TRUE, cache=TRUE)
library(ggplot2)
library(grid)
library(gridExtra)
library(reshape2)
library(gtable)
library(rjags)
source('../clarkfunctions2020.R')
Rcpp::sourceCpp('../cppFns.cpp')
treedata <- read.table('FACEtrees.txt',header=T)
#----------------------------------------------------------------------------
# FUNCTIONS
len <- function(k) length(k)
getMu <- function(sigma, y, M, m){ # conditional distributions
n <- length(y)
V <- 1/( n/sigma + 1/M )
v <- sum(y)/sigma + m/M
rnorm(1, V*v, sqrt(V))
}
getSigma <- function(mu, y, s1, s2){
n  <- length(y)
u1 <- s1 + n/2
u2 <- s2 + 1/2*sum( (y - mu)^2 )
1/rgamma(1, u1, u2)
}
plotFn <- function(normal = str2, trunNorm = bgibbs, ng = 1e4, burnin = NULL){
par(mfrow = c(3, 2))
if(is.null(burnin)){
for(index in 1:ncol(normal)){
plot(normal[, index], type = "l", col = "red",
ylim = c(min(min(normal[,index]), min(trunNorm[,index])),
max(max(normal[,index]), max(trunNorm[,index]))),
main = colnames(trunNorm)[index])
lines(trunNorm[, index], col = "black")}
}
else{
for(index in 1:ncol(normal)){
plot(normal[burnin:ng, index], type = "l", col = "red",
ylim = c(min(min(normal[burnin:ng,index]), min(trunNorm[burnin:ng,index])),
max(max(normal[burnin:ng,index]), max(trunNorm[burnin:ng,index]))),
main = colnames(trunNorm)[index])
lines(trunNorm[burnin:ng, index], col = "black")}
}
}
npop
popsizes[i]
#----------------------------------------------------------------------------
## QUESTION 4
# Plot params
colT <- colorRampPalette( c('#e5f5e0', '#a1d99b', '#31a354') )
cols <- colT(10)
# Data params
popsizes <- rep(c(5, 10, 20),2) #population sizes
npop <- 20               #no. populations
p  <- 0.6                #frequency of allele a
f  <- c(-.8, .8)         #inbreeding coefficient
# Gibbs params
g1 <- g2 <- 1   #beta shape params
priorF   <- 0   #mean and sd for f
priorFSD <- 1
ng     <- 5000
nchain <- 10
nt     <- 500
# Beta chains
mydata <- list(n1=list(), n2=list(), n3=list())
for (i in 1:len(popsizes)) {
if (i-4 < 0) {
inb.tx <- "negative inbreeding"
fg <- f[1]
} else {
inb.tx <- "positive inbreeding"
fg <- f[2] #positive inbreeding
}
# Create data
pr <- pmake(c(p ,fg))     #values for (Paa,Pab,Pbb)
y <-  rmultinom(npop, popsizes[i], pr)
# Reset chains
thin   <- round(seq(1, ng, length=nt))
pgibbs <- matrix(0,nt,nchain)
fgibbs <- pgibbs
# Run sampler
for(j in 1:nchain){
k <- 0                # count variable
pg <- rbeta(1,g1,g2)  # draw initial values from prior
lg <- minf(pg)        # lower limit for f
fg <- .tnorm(1,lg,1,priorF,priorFSD) # random draw for f
for(g in 1:ng){
pf <- update_pf()   #from clarkfunctions2020.R
pg <- pf$pg
fg <- pf$fg
if(g %in% thin){
k <- k + 1
pgibbs[k,j] <- pg
fgibbs[k,j] <- fg
}
}
}
# Graph of joint
pseq <- seq(.01,.99,length=100)
df1 <- data.frame(run   = as.factor(melt(pgibbs)$Var2),
pgibbs = melt(pgibbs)$value,
fgibbs = melt(fgibbs)$value)
df2 <- data.frame(pseq,minf(pseq))
p1 <- ggplot(data=df1, aes(x=pgibbs, y=fgibbs, color=run), alpha=0.5) +
geom_point() + ggtitle(paste0('Beta Chains for n=', popsizes[i], " with ", inb.tx)) +
xlim(c(0,1)) + ylim(c(-1,1)) +
xlab('p') + ylab('f') +
geom_line(data=df2, aes(x=df2$pseq, y=df2$minf.pseq.), color='black') +
scale_color_manual(values = cols)
p2 <- as.vector(fgibbs[-c(1:100),]) #without burnin
mydata[[i]] <- list(n=popsizes[i],
p1=p1,
p2=p2,
y=y)
}
# Data params
popsizes <- rep(c(5, 10, 20),2) #population sizes
npop <- 20               #no. populations
p  <- 0.6                #frequency of allele a
f  <- c(-.8, .8)         #inbreeding coefficient
# Gibbs params
g1 <- g2 <- 1   #beta shape params
priorF   <- 0   #mean and sd for f
priorFSD <- 1
ng     <- 5000
nchain <- 10
nt     <- 500
# Beta chains
mydata <- list(n1=list(), n2=list(), n3=list())
len(popsizes)
if (i-4 < 0) {
inb.tx <- "negative inbreeding"
fg <- f[1]
} else {
inb.tx <- "positive inbreeding"
fg <- f[2] #positive inbreeding
}
# Create data
pr <- pmake(c(p ,fg))     #values for (Paa,Pab,Pbb)
y <-  rmultinom(npop, popsizes[i], pr)
pr
pr
