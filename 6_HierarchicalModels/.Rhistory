IS0 <- dbinom(1:n, 100, (1-pi0)*theta/((1-pi0)*(1-theta)+ (1-pi1)*theta))
plot(1:100, IS0)
IS1 <- dbinom(1:n, 100, pi1*theta/(pi0*(1-theta)+ pi*theta))
plot(1:100, IS1)
theta <- 0.8
IS0_2 <- dbinom(1:n, 100, (1-pi0)*theta/((1-pi0)*(1-theta)+ (1-pi1)*theta))
plot(1:100, IS0_2)
IS1_2 <- dbinom(1:n, 100, pi1*theta/(pi0*(1-theta)+ pi*theta))
plot(1:100, IS1_2)
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
b  <- 4:2                     # beta parameter
# Initialize plot
a  <- signif(b[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
plot(S/m, dbeta(S/m, a, b[1]), xlab=expression( pi ),
ylab=expression( paste("[", pi, "]") ), type='l')
title('beta density for a, b')
cols <- c('black', 'red', 'purple')
locs <- c(1.75, 1.5, 1.25)
for (i in 1:length(b)) {
a  <- signif(b[i]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
lines(S/m, dbeta(S/m, a, b[i]), col=cols[i])
ptext <- paste( "(", a, ", ", b[i], ")", sep="")
text(1,locs[i], ptext,  pos=2, col=cols[i])
}
# comparing variances?
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - meanS)^2*dbetaBinom(S, m, mu=pi,b=b) )
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
b  <- 4:2                     # beta parameter
# Initialize plot
a  <- signif(b[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
plot(S/m, dbeta(S/m, a, b[1]), xlab=expression( pi ),
ylab=expression( paste("[", pi, "]") ), type='l')
title('beta density for a, b')
cols <- c('black', 'red', 'purple')
locs <- c(1.75, 1.5, 1.25)
for (i in 1:length(b)) {
a  <- signif(b[i]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
lines(S/m, dbeta(S/m, a, b[i]), col=cols[i])
ptext <- paste( "(", a, ", ", b[i], ")", sep="")
text(1,locs[i], ptext,  pos=2, col=cols[i])
}
# comparing variances?
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - mean(S))^2*dbetaBinom(S, m, mu=pi,b=b) )
# binomial
m.binom <- n * pi
v.binom <- n * pi * (1-pi)
# beta
b <- b[1]
m.beta <- (a / (a + b))
v.beta <- (a * b) / ( (a + b)^2 * (a + b + 1))
df<- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
b  <- 4:2                     # beta parameter
# Initialize plot
a  <- signif(b[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
plot(S/m, dbeta(S/m, a, b[1]), xlab=expression( pi ),
ylab=expression( paste("[", pi, "]") ), type='l')
title('beta density for a, b')
cols <- c('black', 'red', 'purple')
locs <- c(1.75, 1.5, 1.25)
for (i in 1:length(b)) {
a  <- signif(b[i]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
lines(S/m, dbeta(S/m, a, b[i]), col=cols[i])
ptext <- paste( "(", a, ", ", b[i], ")", sep="")
text(1,locs[i], ptext,  pos=2, col=cols[i])
}
# comparing variances?
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - m.bb)^2*dbetaBinom(S, m, mu=pi,b=b) )
# binomial
m.binom <- n * pi
v.binom <- n * pi * (1-pi)
# beta
b <- b[1]
m.beta <- (a / (a + b))
v.beta <- (a * b) / ( (a + b)^2 * (a + b + 1))
df<- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('../clarkFunctions2020.R')
posteriorSample <- function(samples, llMean, priorMean, llVar, priorVar){
#data
n = samples
mu = llMean
mu0 = priorMean
sigma = llVar
tau = priorVar
set.seed(101)
#sampling
y <- rnorm(n, mu, sigma)
ybar <- mean(y)
prior <- rnorm(n, mu0, tau)
sigmaN <- n/sigma^2 + 1/tau^2
muN <- ((n*ybar)/sigma^2 + mu0/tau^2)/sigmaN
posterior <- rnorm(n, muN, sigmaN)
return(posterior)
}
rm(list=ls())
source('../clarkFunctions2020.R')
beta <- 1:10
?signif
beta <- 1:10
a <- signif(beta[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
a
beta
a <- signif(beta/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
a
varS = (a * b) / ( (a + b)^2 * (a + b + 1))
b <- 1:10
a <- signif(b/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
varS = (a * b) / ( (a + b)^2 * (a + b + 1))
plot(beta, varS)
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
b <- 1:10
meanS <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
S
m
S
mu
pi
b
meanS <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
S*dbetaBinom(S, m, mu=pi,b=b)
lapply?
\pwgraeijdfsc
?lapply
beta <- 1:10
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x))
meanS
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x))
meanS
meanS
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x))
lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x))
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x)))
meanS
varS  <- lapply(beta, function(x) sum( (S - meanS)^2*dbetaBinom(S, m, mu=pi,b=x) ))
x=1
sum( (S-meanS)^2*dbetaBinom(S, m, mu=pi,b=x) )
varS  <- lapply(1:length(beta), function(x) sum( (S-meanS[x])^2*dbetaBinom(S, m, mu=pi,b=beta[x]) ))
meanS[x]
varS  <- lapply(1:length(beta), function(x) sum( (S-meanS[[x]])^2*dbetaBinom(S, m, mu=pi,b=beta[x]) ))
varS
plot(beta, varS)
plot(beta, varS, pch=19, col='blue')
?kable
kable(dfm format='latex', digits=2, row.names=T)
kable(df, format='latex', digits=2, row.names=T)
install.packages('kable')
install.packages('knitr')
install.packages("knitr")
install.packages("knitr")
rm(list=ls())
source('../clarkFunctions2020.R')
knitr::kable(df, format='latex', digits=2, row.names=T)
df
df <- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
df
c(m.bb, m.binom, m.beta)
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
beta <- 1:10
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x)))
varS  <- lapply(1:length(beta), function(x) sum( (S-meanS[[x]])^2*dbetaBinom(S, m, mu=pi,b=beta[x]) ))
plot(beta, varS, pch=19, col='blue')
# Initialize plot
b  <- 4:2                     # beta parameters
a  <- signif(b[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
plot(S/m, dbeta(S/m, a, b[1]), xlab=expression( pi ),
ylab=expression( paste("[", pi, "]") ), type='l')
title('beta density for a, b')
cols <- c('black', 'red', 'purple')
locs <- c(1.75, 1.5, 1.25)
for (i in 1:length(b)) {
a  <- signif(b[i]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
lines(S/m, dbeta(S/m, a, b[i]), col=cols[i])
ptext <- paste( "(", a, ", ", b[i], ")", sep="")
text(1,locs[i], ptext,  pos=2, col=cols[i])
}
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - m.bb)^2*dbetaBinom(S, m, mu=pi,b=b) )
# binomial
m.binom <- n * pi
# binomial
m.binom <- m * pi
v.binom <- m * pi * (1-pi)
# beta
b <- b[1]
m.beta <- (a / (a + b))
v.beta <- (a * b) / ( (a + b)^2 * (a + b + 1))
df <- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
df
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
knitr::kable(df, format='latex', digits=2, row.names=T)
df
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
df
kable(df, format='latex', digits=2, row.names=T)
kable(df)
knitr::kable(df, format='latex', digits=2, row.names=T)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
source('../clarkFunctions2020.R')
knitr::kable(df, format='latex', digits=2, row.names=T)
df <- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
source('../clarkFunctions2020.R')
n <- 100
pi0 <- 0.8  #[S|I=1]
pi1 <- 0.2   #[S|I=0]
theta <- 0.03   # new infected
par(mfrow = c(2,2))
IS0 <- dbinom(1:n, 100, (1-pi0)*theta/((1-pi0)*(1-theta)+ (1-pi1)*theta))
plot(1:100, IS0)
IS1 <- dbinom(1:n, 100, pi1*theta/(pi0*(1-theta)+ pi*theta))
plot(1:100, IS1)
theta <- 0.8
IS0_2 <- dbinom(1:n, 100, (1-pi0)*theta/((1-pi0)*(1-theta)+ (1-pi1)*theta))
plot(1:100, IS0_2)
IS1_2 <- dbinom(1:n, 100, pi1*theta/(pi0*(1-theta)+ pi*theta))
plot(1:100, IS1_2)
# Params
m  <- 50                      # no. at risk
S  <- 0:m
pi <- .35                     # survival Pr
beta <- 1:10
meanS <- lapply(beta, function(x) sum( S*dbetaBinom(S, m, mu=pi,b=x)))
varS  <- lapply(1:length(beta), function(x) sum( (S-meanS[[x]])^2*dbetaBinom(S, m, mu=pi,b=beta[x]) ))
plot(beta, varS, pch=19, col='blue')
# Initialize plot
b  <- 4:2                     # beta parameters
a  <- signif(b[1]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
plot(S/m, dbeta(S/m, a, b[1]), xlab=expression( pi ),
ylab=expression( paste("[", pi, "]") ), type='l')
title('beta density for a, b')
cols <- c('black', 'red', 'purple')
locs <- c(1.75, 1.5, 1.25)
for (i in 1:length(b)) {
a  <- signif(b[i]/(1/pi - 1),3)  # 2nd beta parameter to give mean value = pi
lines(S/m, dbeta(S/m, a, b[i]), col=cols[i])
ptext <- paste( "(", a, ", ", b[i], ")", sep="")
text(1,locs[i], ptext,  pos=2, col=cols[i])
}
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - m.bb)^2*dbetaBinom(S, m, mu=pi,b=b) )
# binomial
m.binom <- m * pi
v.binom <- m * pi * (1-pi)
# beta
b <- b[1]
m.beta <- (a / (a + b))
v.beta <- (a * b) / ( (a + b)^2 * (a + b + 1))
df <- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
df
knitr::kable(df, format='latex', digits=2, row.names=T)
df
knitr::kable(df, format='latex', digits=2, row.names=T)
kable(df, format='latex', digits=2, row.names=T)
require(knitr)
kable(df, format='latex', digits=2, row.names=T)
mode(df)
?kable
kable(as.character(df), format='latex', digits=2, row.names=T)
kable(df)
kable(head(iris), format = "latex")
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
v.bb  <- sum( (S - m.bb)^2*dbetaBinom(S, m, mu=pi,b=b) )
# binomial
m.binom <- m * pi
v.binom <- m * pi * (1-pi)
# beta
b <- b[1]
m.beta <- (a / (a + b))
v.beta <- (a * b) / ( (a + b)^2 * (a + b + 1))
df <- data.frame(mean=c(m.bb, m.binom, m.beta), var=c(v.bb, v.binom, v.beta))
rownames(df) <- c('beta-binomial', 'binomial', 'beta')
# kable(df, format='latex', digits=2, row.names=T)
kable(head(iris), format = "latex")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
source('../clarkFunctions2020.R')
knitr::kable(df, format="latex", digits=2)
# beta-binomial
m.bb <- sum( S*dbetaBinom(S, m, mu=pi,b=b) )
means <- as.data.frame(V, row.names = as.character(1:nrow(V)))
V = solve((1/sigma^2) * t(X)%*%X + solve(B))
c('mean', betas)
betas = c('beta1', 'beta2', 'beta3', 'beta4', 'beta5')
col.names = c('mean', betas)
col.names
as.data.frame(cbind(Vv, V), row.names = betas, col.names = c('mean', betas))
n = 1000
p = 5
sigma = 10
X <- matrix(rnorm(p*n, 7, 10), n, p )
X[, 1] <- 1
beta <- matrix(rnorm(p, 4, 9), p, 1 )
y <- matrix(rnorm(n, 5, 8), n, 1)
b <- matrix(rnorm(p, 6, 9), p, 1)
B <- diag(x = 20, nrow = p, ncol = p)
V = solve((1/sigma^2) * t(X)%*%X + solve(B))
v = (1/sigma^2)*t(X)%*%y + solve(B)%*% b
Vv = V%*%v
betas = c('beta1', 'beta2', 'beta3', 'beta4', 'beta5')
means <- as.data.frame(cbind(Vv, V), row.names = betas, col.names = c('mean', betas))
means
means <- data.frame(cbind(Vv, V), row.names = betas, col.names = c('mean', betas))
cbind(Vv, V)
c('mean', betas)
betas
df <- data.frame(cbind(Vv, V))
row.names(df) = betas; col.names(df) = c('mean', betas)
row.names(df) = betas
df <- data.frame(cbind(Vv, V))
row.names(df) = betas
col.names(df) <- c('mean', betas)
col.names(df) <- c('mean', betas)
names(df) <- c('mean', betas)
df
$$
L(\mathbf{y};\mu, \sigma^2) = \prod_{i=1}^n \frac{1}{\sqrt{2\pi\sigma^2}} \exp\left\{-\frac12 \frac{(y_i-\mu)^2}{\sigma^2}\right\}\propto\frac{1}{\sigma^2}\exp\left\{-\frac12 \frac{\sum (y_i-\mu)^2}{\sigma^2}\right\}
$$
4*8*12
64*6
n     <- 10
nj    <- 2 + rpois(n,rexp(n,1/5))              # group sizes
ng
nj
n
id    <- rep(1:n,times=nj)
theta <- rgamma(n,10,1)
theta
y     <- rpois(sum(nj),theta[id])
sy    <- tapply(y, id, sum)                    # group totals
a <- 1
b <- 1
tseq <- seq(0,20,length=1000)
plot(tseq,dgamma(tseq,a + sum(y),b + sum(nj)),xlim=range(tseq),
xlab='theta',ylab = '[theta]',type='l',lwd=2)
ci <- qgamma(c(.5,.025,.975), a + sum(y), b + sum(nj))
abline(v=ci, lty=2)
sy
id
?rpois
y
y     <- rpois(sum(nj),theta[id])
y     <- rpois(sum(nj),theta[id])
y
sy    <- tapply(y, id, sum)                    # group totals
sy
a <- 1
b <- 1
cij <- matrix(NA, n, 3)
plot(tseq,dgamma(tseq, a + sum(y), b + sum(nj)),xlim=range(tseq),
xlab='theta',ylab = '[theta]',type='l',lwd=2)
for(j in 1:n){
lines(tseq,dgamma(tseq, a + sy[j], b + nj[j]),type='l', col=j)
cij[j,] <- qgamma(c(.5,.025,.975), a + sy[j], b + nj[j])
}
n  <- 20
nj <- 5 + rpois(n,rexp(n,1/20))              # group sizes
id <- rep(1:n,times=nj)
aj <- rgamma(n,5,.5)             # hyperprior for groups
bj <- rgamma(1,3,1)
tj <- rgamma(n,aj,bj)            # group differences
y  <- rpois(sum(nj), tj[id])
sy <- tapply(y, list(id), sum)
a <- 1
b <- 1
tseq <- seq(0,20,length=1000)
plot(tseq,dgamma(tseq, a + sum(y), b + sum(nj)),xlim=range(tseq),
xlab='theta',ylab = '[theta]',type='l',lwd=2)
ci <- qgamma(c(.5,.025,.975), a + sum(y), b + sum(nj))
abline(v=ci, lty=2)
cij <- matrix(NA, n, 3)
plot(tseq,dgamma(tseq, a + sum(y), b + sum(nj)),xlim=range(tseq),
xlab='theta', ylab = '[theta]',type='l',lwd=2)
for(j in 1:n){
lines(tseq,dgamma(tseq, a + sy[j], b + nj[j]),type='l', col=j)
cij[j,] <- qgamma(c(.5,.025,.975), a + sy[j], a + nj[j])
}
updateAB <- function(tg, ag, bg, sy, nj){
ap <- .tnorm(n, 0, 20, ag, 2)
bp <- .tnorm(1, 0, 20, bg, 2)
pnow <- dgamma(tg, ag + sy, bg + nj, log=T) +
dgamma(ag, 5, .5, log=T) + dgamma(bg, 3, 1, log=T)
pnew <- dgamma(tg, ap + sy, bp + nj, log=T)  +
dgamma(ap, 5, .5, log=T) + dgamma(bp, 3, 1, log=T)
z <- runif(1,0,1)
a <- exp( sum(pnew - pnow) )
if(z < a){
ag <- ap
bg <- bp
}
list(ag = ag, bg = bg)
}
ag <- rep(1,n)
bg <- 1
ng <- 5000
tgibbs <- agibbs <- matrix(NA,ng,n)
bgibbs <- rep(NA, ng)
for(g in 1:ng){
tg  <- rgamma(n, ag + sy, bg + nj)
tmp <- updateAB(tg, ag, bg, sy, nj)
ag  <- tmp$ag
bg  <- tmp$bg
tgibbs[g,] <- tg
agibbs[g,] <- ag
bgibbs[g] <- bg
}
source('../clarkFunctions2020.r')
Rcpp::sourceCpp('clarkCppFns.cpp')
Rcpp::sourceCpp('../clarkCppFns.cpp')
list.files('../')
getwd()
setwd("~/Documents/2020_Spring/BIO665/BIO665_git/6_HierarchicalModels")
list.files('../')
Rcpp::sourceCpp('../cppFns.cpp')
ag <- rep(1,n)
bg <- 1
ng <- 5000
tgibbs <- agibbs <- matrix(NA,ng,n)
bgibbs <- rep(NA, ng)
for(g in 1:ng){
tg  <- rgamma(n, ag + sy, bg + nj)
tmp <- updateAB(tg, ag, bg, sy, nj)
ag  <- tmp$ag
bg  <- tmp$bg
tgibbs[g,] <- tg
agibbs[g,] <- ag
bgibbs[g] <- bg
}
ag <- rep(1,n)
bg <- 1
ng <- 5000
tgibbs <- agibbs <- matrix(NA,ng,n)
bgibbs <- rep(NA, ng)
for(g in 1:ng){
tg  <- rgamma(n, ag + sy, bg + nj)
tmp <- updateAB(tg, ag, bg, sy, nj)
ag  <- tmp$ag
bg  <- tmp$bg
tgibbs[g,] <- tg
agibbs[g,] <- ag
bgibbs[g] <- bg
}
list.files('../')
source('../clarkFunctions2020.r')
Rcpp::sourceCpp('../cppFuns.cpp')
1/2 + 2/3 + 3/4
11^3
11^4
11^5
11^6
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, cache=TRUE)
pacman::p_load(ggplot2)
source('../clarkfunctions2020.R')
# Rcpp::sourceCpp('../cppFns.cpp')
# any libraries and data here
#----------------------------------------------------------------------------
# FUNCTIONS
# put functions here
set.seed(123)
y <- rnorm(20, 0, 1)
Y <- mean(y)
nlo <- length(y)
nboot <- 2000
varVals <- matrix(0, nboot, 1)
for(b in 1:nboot){
bindex <- sample(y, nlo, replace = T)
Y <- mean(bindex)
varVals[b,1] <- sum(bindex^2)/nlo
}
hist(varVals[,1], main = paste0("Estimates of variance"), xlab = "Estimates")
varValsSample <- matrix(0, nboot, 1)
for(b in 1:nboot){
bindex <- sample(y, nlo, replace = T)
Y <- mean(bindex)
div <- 1/(nlo - 1)
varValsSample[b,1] <- sum((bindex - Y)^2)*div
}
