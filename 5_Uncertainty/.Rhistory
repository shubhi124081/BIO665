abline(v=ci,lty=2)
# Standard Error
n    <- 100
mu   <- 100
sd   <- 20
yseq <- seq(0,2*mu,by=1)
y    <- rnorm(n,mu,sd)
hist(y,breaks=yseq,probability=T)
se   <- sqrt(var(y)/n)
mle  <- mean(y)
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
# Standard Error
n    <- 100
mu   <- 100
sd   <- 20
yseq <- seq(0,2*mu,by=1)
y    <- rnorm(n,mu,sd)
hist(y,breaks=yseq,probability=T)
se   <- sqrt(var(y)/n)
mle  <- mean(y)
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
se
y
var(y)
n
se
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
ci
# Standard Error
n    <- 1000
mu   <- 100
sd   <- 20
yseq <- seq(0,2*mu,by=1)
y    <- rnorm(n,mu,sd)
hist(y,breaks=yseq,probability=T)
se   <- sqrt(var(y)/n)
mle  <- mean(y)
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
sd
y
se   <- sqrt(var(y)/n)
se
mle  <- mean(y)
mle
se
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
# Why is this CI not looking like it covers
# the mean 95% of the time?
alpha <- .05
qnorm(c(alpha/2,1 - alpha/2),mle,se)
mle
se
var(y)
n
var(y)/n
n    <- 10
mu   <- 100
sd   <- 20
yseq <- seq(0,2*mu,by=1)
y    <- rnorm(n,mu,sd)
hist(y,breaks=yseq,probability=T)
se   <- sqrt(var(y)/n)
mle  <- mean(y)
ci   <- c(mle - 1.96*se,mle + 1.96*se)
abline(v=ci,lty=2)
# Why is this CI not looking like it covers
# the mean 95% of the time?
alpha <- .05
qnorm(c(alpha/2,1 - alpha/2),mle,se)
rep  <- 1000
ci   <- matrix(0,rep,2)
for(i in 1:rep){
y   <- rnorm(n,mu,sd)
se  <- sqrt(var(y)/n)
mle <- mean(y)
ci[i,] <- c(mle - 1.96*se,mle + 1.96*se)
}
clo <- hist(ci[,1],breaks=yseq,plot=F) #lower conf limit
chi <- hist(ci[,2],breaks=yseq,plot=F) #upper conf limit
hist(y,breaks=yseq,probability=T)
lines(clo$mids,clo$density,type='s')
lines(chi$mids,chi$density,type='s')
ci
clo
chi
hist(y,breaks=yseq,probability=T)
y
cover <- length(which(mu > ci[,1] & mu < ci[,2]))/rep
cover
plot(yseq,dnorm(yseq,mle,se),type='l')
ci <- qnorm(c(.025,.975),mle,se)
abline(v = ci, lty = 2)
n    <- 10
y    <- rpois(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='')
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='')
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0')
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
n    <- 10
y    <- rpois(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
n    <- 10
y    <- rpois(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
pchisq(D,1)
n    <- 100
y    <- rpois(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
n    <- 10
y    <- rpois(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
y    <- rexp(n,4.7)                                   #simulated counts
y
<- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
n    <- 10
y    <- rexp(n,4.7)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
?rexp
n    <- 10
y    <- rexp(n)                                   #simulated counts
ybar <- mean(y)
rseq <- seq(.3,3,length=100)*ybar
R    <- ybar*( log(rseq) - log(ybar) + 1) - rseq    #normed likelihood
par(mfrow=c(3,1), mar=c(4,4,1,4))
plot(rseq, R, type='l', xlab='', ylab="normed likelihood")
abline(v=ybar,lty=2)
D  <- -2*R                #Deviance
plot(rseq,D,type='l', xlab='', ylab="Deviance")
abline(v=ybar,lty=2)
abline(h=3.84,lty=2)      #value of D at P = 0.05
P <- 1 - pchisq(D,1)      #P value
plot(rseq, P, type='l', xlab='lambda_0', ylab="P-value")
abline(v=ybar,lty=2)
abline(h=.05, lty=2)
#find the 95% CI:
CI <- range(rseq[P > .05])
abline(v=CI, lty=2)
# Bootstrapping
n <- 10
lambda <- 15
y <- rpois(n, lambda)
y
runif(n, min=1, max=n)
newy <- ceiling(runif(n, min=0, max=n-1))
newy
inx <- ceiling(runif(n, min=0, max=n-1))
newy <- y[inx]
newy
est <- mean(newy)
est
error <- est - lambda
error
filename <- ('../dataFiles/FACEtrees.txt')
data <- read.table(filename, header=T)
y <- data[,'cones']
x <- data[,'diam']
w <- is.finite(x) & is.finite(y)
ambient  <- which(data[,'trt'] == 0 & w)
elevated <- which(data[,'trt'] == 1 & w)
Y    <- mean(y[ambient])
X2   <- mean(x[ambient]^2)
nlo  <- length(ambient)
bmuA <- Y/X2
bseA  <- sqrt(Y/nlo)/X2
Y    <- mean(y[elevated])
X2   <- mean(x[elevated]^2)
nhi  <- length(elevated)
bmuE <- Y/X2
bseE  <- sqrt(Y/nhi)/X2
Y    <- mean(y[ambient])
X2   <- mean(x[ambient]^2)
nlo  <- length(ambient)
bmuA <- Y/X2
bseA  <- sqrt(Y/nlo)/X2
Y    <- mean(y[elevated])
X2   <- mean(x[elevated]^2)
nhi  <- length(elevated)
bmuE <- Y/X2
bseE  <- sqrt(Y/nhi)/X2
estimates <- signif( matrix( cbind(c(bmuA, bseA),c(bmuE, bseE)), 2, 2), 3 )
estimates
rownames(estimates) <- c('mean','se')
colnames(estimates) <- c('ambient','elevated')
estimates
bseq <- seq(.002,.007,length=1000)
plot(bseq,dnorm(bseq,estimates['mean',1],estimates['se',1]),type='l',
xlab='beta',ylab='density')
lines(bseq,dnorm(bseq,estimates['mean',2],estimates['se',1]),col=2)
nboot <- 2000         #no. bootstrap estimates
bvals <- matrix(0, nboot, 2) #matrix to hold estimates
colnames(bvals) <- c('ambient','elevated')
bvals
for(b in 1:nboot){
bindex <- sample(ambient, nlo, replace=T) #sample with replacement
Y    <- mean(y[bindex])
X2   <- mean(x[bindex]^2)
bvals[b, 1] <- Y/X2
bindex <- sample(elevated, nhi, replace=T) #sample with replacement
Y    <- mean(y[bindex])
X2   <- mean(x[bindex]^2)
bvals[b, 2] <- Y/X2
}
bvals
se <- apply(bvals, 2, sd)
hist(bvals[,1],freq=F,nclass=20,xlim=c(0,.01))
lines(density(bvals[,1]))
ci1 <- quantile(bvals[,1],c(0.025,.975))
abline(v=ci1,lty=2)
elev <- hist(bvals[,2],nclass=20, plot=F)
lines(elev$mids, elev$density, type='s')
lines(density(bvals[,2]))
ci2 <- quantile(bvals[,2],c(0.025,.975))
abline(v=ci2,lty=2)
data   <- read.table('../dataFiles/dataTreeFACE.txt',header=T)
list.files()
list.files('../')
list.files('../dataFiles')
# MLE for a single data point
mu   <- 0
y    <- rnorm(1,mu)
y
?rnorm
# MLE for a few data points
mu   <- 0
n <- 100
y    <- rnorm(n, 1,mu)
y
y    <- rnorm(n, mu)
y
mseq <- seq(-4,4,length=100)
like <- dnorm(mseq,y)
plot(mseq,like,type='l')
abline(v=y,lty=2)
# MLE for a few data points
mu   <- 0
n <- 100
y    <- rnorm(n, mu)
mseq <- seq(-4,4,length=100)
like <- dnorm(mseq,y)
plot(mseq,like,type='l')
MLE <- ( n/2 * (1/2 * sum(y-mu)^2))
MLE
MLE <- ( n/2 * (1/2 * sum(y-mu)^2)) ^ (2 /(n+2))
MLE
mean(y)
MLE2 <-  1/n * (sum(y-mu)^2)
MLE2 <-  1/n * (sum(y-mu)^2)
MLE2
MLE2 <-  1/n * sum((y-mu)^2)
MLE2
MLE <- ( n/2 * (1/2 * sum(y-mu)^2)) ^ (-2 /(n+2))
MLE
MLE
n <- 1000
mu   <- 0
n <- 1000
y    <- rnorm(n, mu)
MLE <- ( n/2 * (1/2 * sum(y-mu)^2)) ^ (-2 /(n+2))
MLE2 <-  1/n * sum((y-mu)^2)
MLE
MLE2
hist(y)
hist(y, breaks=100)
?dnorm
mseq
mseq <- seq(-4,4,length=n)
like <- sum(dnorm(y,mseq, sigma, log=T))
mseq <- seq(-4,4,length=200)
like <- sum(dnorm(y,mseq, sigma, log=T))
like <- sum(dnorm(y,mseq, 1, log=T))
like <- sum(dnorm(y,mseq, 1, log=T))
plot(mseq,like,type='l')
mseq <- seq(-4,4,length=100) * MLE
MLE <- ( n/2 * (1/2 / sum(y-mu)^2)) ^ ( 2 /(n+2) )
MLE
MLE2
for (k in 1:nseq) {
like[k] <- sum(dnorm(y, mseq[k], 1, log=T))
}
nseq <- 100
mseq <- seq(0.3,3,length=nseq) * MLE
like <- rep(NA, nseq)
for (k in 1:nseq) {
like[k] <- sum(dnorm(y, mseq[k], 1, log=T))
}
plot(mseq,like,type='l')
abline(v=y,lty=2)
plot(mseq,like,type='l')
MLE
MLE2
?dnorm
mseq[k]
for (k in 1:nseq) {
like[k] <- sum(dnorm(y, sd=sqrt(mseq[k]), log=T))
}
plot(mseq,like,type='l')
abline(v=MLE, col='red')
abline(v=MLE2, col='blue')
like2 <- lapply(like, function(x) sum(dnorm(y, x, log=T)))
like == like2
like
like2 <- lapply(mseq, function(x) sum(dnorm(y, x, log=T)))
like = like2
like <- rep(NA, nseq)
for (k in 1:nseq) {
like[k] <- sum(dnorm(y, sd=sqrt(mseq[k]), log=T))
}
like2 <- lapply(mseq, function(x) sum(dnorm(y, x, log=T)))
like == like2
like2
like2 <- unlist(lapply(mseq, function(x) sum(dnorm(y, x, log=T))))
sum(like == like2)
plot(mseq,like2,type='l')
like2 <- unlist(lapply(mseq, function(x) sum(dnorm(y, sqrt(x), log=T))))
sum(like == like2)
plot(mseq,like2,type='l')
like2 <- unlist(lapply(mseq, function(x) sum(dnorm(y, sd=sqrt(x), log=T))))
plot(mseq,like2,type='l')
sum(like == like2)
abline(v=MLE, col='red')
abline(v=MLE2, col='blue')
lapply(mseq, function(x) sum(dnorm(y, sd=sqrt(x), log=T)))
library(dplyr)
library(tidyr)
like <- unlist(lapply(mseq, function(x) sum(dnorm(y, sd=sqrt(x), log=T))))
plot(mseq,like,type='l')
compute_likelihood<- function(x) {
sum(dnorm(y, sd=sqrt(x), log=T))
}
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(likelihood=compute_likelihood(mseq)) %>%
glimpse()
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(x=mseq,y=likelihood)
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(x=mseq,y=likelihood)
library(tidyverse)
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(x=mseq,y=likelihood)
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(x=mseq,y=likelihood)
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(cur_likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(aes(x=mseq,y=cur_likelihood))
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(cur_likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(aes(x=mseq,y=cur_likelihood)) +
geom_vline(xintercept = MLE, color='blue') +
geom_vline(xintercept = MLE2, color='red') +
plot(mseq,like,type='l')
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(cur_likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(aes(x=mseq,y=cur_likelihood)) +
geom_vline(xintercept = MLE, color='blue') +
geom_vline(xintercept = MLE2, color='red')
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(cur_likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(aes(x=mseq,y=cur_likelihood)) +
geom_vline(xintercept = MLE, color='red') +
geom_vline(xintercept = MLE2, color='blue')
plot(mseq,like,type='l')
abline(v=MLE, col='red')
abline(v=MLE2, col='blue')
# 95% CI
plot(mseq,like,type='l')
ggplot() + geom_line(aes(x=mseq,y=like)) +
geom_vline(xintercept = MLE, color='red') +
geom_vline(xintercept = MLE2, color='blue')
# TIDY version
tibble(mseq=mseq) %>%
rowwise() %>%
mutate(cur_likelihood=compute_likelihood(mseq)) %>%
ggplot() + geom_line(aes(x=mseq,y=cur_likelihood)) +
geom_vline(xintercept = MLE, color='red') +
geom_vline(xintercept = MLE2, color='blue') +
ggtitle("TIDY")
ggplot() + geom_line(aes(x=mseq,y=like)) +
geom_vline(xintercept = MLE, color='red') +
geom_vline(xintercept = MLE2, color='blue') +
ggtitle("NOT TIDY :(")
vignette("dbplyr")
vignette("dplyr")
0.7*log(4000) – 0.08
0.7*log(4000)-0.08
0.7*log(4000000)-0.08
