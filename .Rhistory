names(sg.df) <- c('x', 'y', 'true', 'pred')
sg.df
y.df <- data.frame(melt(y), melt(ypred)$value)
y.df
head(ypred)
S
head(y)
head(predy)
colMeans(predy)
y.df <- data.frame(melt(colMeans(predy)), melt(ypred)$value)
head(y.df)
ypred <- matrix( colMeans(predy),n,S )
head(ypred)
ypred
head(ypred)
melt(ypred)
plot(y,ypred)
p3 <- plot(y,ypred)
p3
ggplot(bg.df, aes(true, pred)) + geom_point()
ypred <- matrix( colMeans(predy),n,S )
sg.df <- data.frame(melt(Sigma), melt(sg)$value)
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred')
bg.df <- data.frame(melt(beta), melt(bg)$value)
sg.df <- data.frame(melt(Sigma), melt(sg)$value)
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred')
ggplot(bg.df, aes(true, pred)) + geom_point()
segments(as.vector(beta), bci[1,], as.vector(beta), bci[2,])
bci[1,]
bci
bci <- data.frame(apply(bgibbs, 2, quantile, c(.025,.975))()
ypred <- matrix( colMeans(predy),n,S )
bci <- data.frame(apply(bgibbs, 2, quantile, c(.025,.975)))
bci
bci <- data.frame(transpose(apply(bgibbs, 2, quantile, c(.025,.975))))
?transpose
bci <- apply(bgibbs, 2, quantile, c(.025,.975))
bci <- data.frame(lower=bci[1,], upper=bci[2,])
bci
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(data=bci, aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
bg.df <- data.frame(melt(beta), melt(bg)$value)
sg.df <- data.frame(melt(Sigma), melt(sg)$value)
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred')
bg.df
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(data=bci, aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
ggplot(bg.df, aes(true, pred)) + geom_point()
head(bg.df)
dim(bg.df)
dim(bci)
bci <- apply(bgibbs, 2, quantile, c(.025,.975))
bg.df <- data.frame(melt(beta), melt(bg)$value, lower=bci[1,], upper=bci[2,])
bg.df <- data.frame(melt(beta), melt(bg)$value, lower=bci[1,], upper=bci[2,])
head(bg.df)
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred', 'lower', 'upper')
sci <- apply(sgibbs, 2, quantile, c(.025,.975))
sg.df <- data.frame(melt(Sigma), melt(sg)$value, lower=sci[1,], upper=sci[2,])
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred', 'lower', 'upper')
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(data=bci, aes(ymin=lower, ymax=upper),
width=.2, position=position_dodge(.9))
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper),
width=.2, position=position_dodge(.9))
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper),
width=.1)
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5,
width=.1)
ggplot(bg.df, aes(true, pred)) + geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color='pink', width=.1) +
geom_abline(slope=1, intercept=0)
ggplot(bg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color='purple', width=.1) +
geom_point()
plot(y,ypred)
head(y)
head(ypred)
melt(y)
y.df <- cbind(melt(y), melt(ypred)$value)
head(y.df)
y.df <- data.frame(true=melt(y)$value, pred=melt(ypred)$value)
p3 <- ggplot(y.df, aes(true, pred)) + geom_point()
p3
p3 <- ggplot(y.df, aes(true, pred)) + geom_point(alpha=0.5)
p3
p3 <- ggplot(y.df, aes(true, pred)) + geom_point(alpha=0.5, color='red')
p3
p3 <- ggplot(y.df, aes(true, pred)) + geom_point(alpha=0.5, color='green')
p3
mycol <- c("#69b3a2", "#404080", "#C71585")
################################################################################
# Simulation
################################################################################
mycol <- c("#69b3a2", "#404080", "#C71585")
p1 <- ggplot(bg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[1], width=.1) +
geom_point()
p2 <- ggplot(sg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[2], width=.1) +
geom_point()
p3 <- ggplot(y.df, aes(true, pred)) + geom_point(alpha=0.5, color=mycol[3])
p1
p2
p3
p3 <- ggplot(y.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_point(alpha=0.5, color=mycol[3])
p3
p2
ypred <- matrix( colMeans(predy),n,S )
plot(y,ypred)
abline(0,1)
yci <- apply(predy, 2, quantile, c(.025,.975))
segments(as.vector(y), yci[1,], as.vector(y), yci[2,])
glist <- list()
for (i in 1:nrow(iter.df)) {
# Parameters
n <- iter.df$n[i]  # sample size
S <- iter.df$S[i]    # responses
Q <- 4    # predictors
# Coefficient matrix
beta <- matrix( rnorm(Q), Q )
for (j in 2:S) { beta <- cbind(beta, matrix( rnorm(Q), Q )) }
# Design matrix
x <- matrix( rnorm(n*Q), n, Q)
x[, 1] <- 1
# Covariance matrix
Sigma <- cov( .rMVN(5, 0, diag(S) ) )
# Labeling things
xnames <- paste0('x', 1:Q)
ynames <- paste0('y', 1:S)
colnames(beta) <- rownames(Sigma) <- colnames(Sigma) <- ynames
rownames(beta) <- colnames(x) <- xnames
# Simulating y
y  <- x%*%beta + .rMVN(n, 0, Sigma)
################################################################################
# Recovering covariates
################################################################################
bg <- beta*0
sg <- Sigma*0
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
ng <- 2000                        # setup Gibbs sampler
bgibbs <- matrix(0,ng,S*Q)
sgibbs <- matrix(0,ng,S*S)
predy  <- matrix(0,ng,S*n)        # predict the data
colnames(bgibbs) <- as.vector( outer(xnames,ynames,paste,sep='_') )
colnames(sgibbs) <- as.vector( outer(ynames,ynames,paste,sep='_') )
IXX <- solve(crossprod(x))       # only do this once
df  <- n - Q + S - 1             # Wishart
for(g in 1:ng){
bg <- .updateBetaMVN(x,y,sg)
sg <- suppressMessages(.updateWishart(x, y, df, beta=bg, IXX=IXX)$sigma)
sgibbs[g,] <- sg
bgibbs[g,] <- bg
predy[g,] <- as.vector( .rMVN(n,x%*%bg,sg) )  # predicted y
}
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
bmu <- colMeans(bgibbs)
bci <- apply(bgibbs, 2, quantile, c(.025,.975))
sci <- apply(sgibbs, 2, quantile, c(.025,.975))
ypred <- matrix( colMeans(predy),n,S )
bg.df <- data.frame(melt(beta), melt(bg)$value, lower=bci[1,], upper=bci[2,])
sg.df <- data.frame(melt(Sigma), melt(sg)$value, lower=sci[1,], upper=sci[2,])
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred', 'lower', 'upper')
y.df <- data.frame(true=melt(y)$value, pred=melt(ypred)$value)
p1 <- ggplot(bg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[1], width=.1) +
geom_point()
p2 <- ggplot(sg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[2], width=.1) +
geom_point()
p3 <- ggplot(y.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_point(alpha=0.5, color=mycol[3])
glist[[i]] <- list(n=n, S=S, bgplot=p1, sgplot=p2, ypredplot=p3)
}
# Parameters
n <- iter.df$n[i]  # sample size
S <- iter.df$S[i]    # responses
Q <- 4    # predictors
# Coefficient matrix
beta <- matrix( rnorm(Q), Q )
for (j in 2:S) { beta <- cbind(beta, matrix( rnorm(Q), Q )) }
# Design matrix
x <- matrix( rnorm(n*Q), n, Q)
x[, 1] <- 1
# Covariance matrix
Sigma <- cov( .rMVN(5, 0, diag(S) ) )
# Labeling things
xnames <- paste0('x', 1:Q)
ynames <- paste0('y', 1:S)
colnames(beta) <- rownames(Sigma) <- colnames(Sigma) <- ynames
rownames(beta) <- colnames(x) <- xnames
# Simulating y
y  <- x%*%beta + .rMVN(n, 0, Sigma)
################################################################################
# Recovering covariates
################################################################################
bg <- beta*0
sg <- Sigma*0
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
ng <- 2000                        # setup Gibbs sampler
bgibbs <- matrix(0,ng,S*Q)
sgibbs <- matrix(0,ng,S*S)
predy  <- matrix(0,ng,S*n)        # predict the data
colnames(bgibbs) <- as.vector( outer(xnames,ynames,paste,sep='_') )
colnames(sgibbs) <- as.vector( outer(ynames,ynames,paste,sep='_') )
IXX <- solve(crossprod(x))       # only do this once
df  <- n - Q + S - 1             # Wishart
for(g in 1:ng){
bg <- .updateBetaMVN(x,y,sg)
sg <- suppressMessages(.updateWishart(x, y, df, beta=bg, IXX=IXX)$sigma)
sgibbs[g,] <- sg
bgibbs[g,] <- bg
predy[g,] <- as.vector( .rMVN(n,x%*%bg,sg) )  # predicted y
}
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
bmu <- colMeans(bgibbs)
bci <- apply(bgibbs, 2, quantile, c(.025,.975))
sci <- apply(sgibbs, 2, quantile, c(.025,.975))
ypred <- matrix( colMeans(predy),n,S )
bg.df <- data.frame(melt(beta), melt(bg)$value, lower=bci[1,], upper=bci[2,])
sg.df <- data.frame(melt(Sigma), melt(sg)$value, lower=sci[1,], upper=sci[2,])
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred', 'lower', 'upper')
y.df <- data.frame(true=melt(y)$value, pred=melt(ypred)$value)
p1 <- ggplot(bg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[1], width=.1) +
geom_point() + ggtitle(paste0('beta predictions for n = ', n, '; S = ', S))
p2 <- ggplot(sg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[2], width=.1) +
geom_point() + ggtitle(paste0('sigma predictions for n = ', n, '; S = ', S))
p3 <- ggplot(y.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_point(alpha=0.5, color=mycol[3]) +
ggtitle(paste0('y predictions for n = ', n, '; S = ', S))
glist[[i]] <- list(n=n, S=S, bgplot=p1, sgplot=p2, ypredplot=p3)
p1
p2
p3
n <- c(10, 100, 400)
S <- c(2, 4, 8)
iter.df <- data.frame(n=rep(n,each=length(S)) , S=rep(S, by=length(n)))
glist <- list()
for (i in 1:nrow(iter.df)) {
# Parameters
n <- iter.df$n[i]  # sample size
S <- iter.df$S[i]    # responses
Q <- 4    # predictors
# Coefficient matrix
beta <- matrix( rnorm(Q), Q )
for (j in 2:S) { beta <- cbind(beta, matrix( rnorm(Q), Q )) }
# Design matrix
x <- matrix( rnorm(n*Q), n, Q)
x[, 1] <- 1
# Covariance matrix
Sigma <- cov( .rMVN(5, 0, diag(S) ) )
# Labeling things
xnames <- paste0('x', 1:Q)
ynames <- paste0('y', 1:S)
colnames(beta) <- rownames(Sigma) <- colnames(Sigma) <- ynames
rownames(beta) <- colnames(x) <- xnames
# Simulating y
y  <- x%*%beta + .rMVN(n, 0, Sigma)
################################################################################
# Recovering covariates
################################################################################
bg <- beta*0
sg <- Sigma*0
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
ng <- 2000                        # setup Gibbs sampler
bgibbs <- matrix(0,ng,S*Q)
sgibbs <- matrix(0,ng,S*S)
predy  <- matrix(0,ng,S*n)        # predict the data
colnames(bgibbs) <- as.vector( outer(xnames,ynames,paste,sep='_') )
colnames(sgibbs) <- as.vector( outer(ynames,ynames,paste,sep='_') )
IXX <- solve(crossprod(x))       # only do this once
df  <- n - Q + S - 1             # Wishart
for(g in 1:ng){
bg <- .updateBetaMVN(x,y,sg)
sg <- suppressMessages(.updateWishart(x, y, df, beta=bg, IXX=IXX)$sigma)
sgibbs[g,] <- sg
bgibbs[g,] <- bg
predy[g,] <- as.vector( .rMVN(n,x%*%bg,sg) )  # predicted y
}
rownames(bg) <- colnames(x) <- xnames
colnames(bg) <- rownames(sg) <- colnames(sg) <- ynames
bmu <- colMeans(bgibbs)
bci <- apply(bgibbs, 2, quantile, c(.025,.975))
sci <- apply(sgibbs, 2, quantile, c(.025,.975))
ypred <- matrix( colMeans(predy),n,S )
bg.df <- data.frame(melt(beta), melt(bg)$value, lower=bci[1,], upper=bci[2,])
sg.df <- data.frame(melt(Sigma), melt(sg)$value, lower=sci[1,], upper=sci[2,])
names(bg.df) <- names(sg.df) <- c('x', 'y', 'true', 'pred', 'lower', 'upper')
y.df <- data.frame(true=melt(y)$value, pred=melt(ypred)$value)
p1 <- ggplot(bg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[1], width=.1) +
geom_point() + ggtitle(paste0('beta predictions for n = ', n, '; S = ', S))
p2 <- ggplot(sg.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_errorbar(aes(ymin=lower, ymax=upper), alpha=0.5, color=mycol[2], width=.1) +
geom_point() + ggtitle(paste0('sigma predictions for n = ', n, '; S = ', S))
p3 <- ggplot(y.df, aes(true, pred)) +
geom_abline(slope=1, intercept=0, color='lightgrey') +
geom_point(alpha=0.5, color=mycol[3]) +
ggtitle(paste0('y predictions for n = ', n, '; S = ', S))
glist[[i]] <- list(n=n, S=S, bgplot=p1, sgplot=p2, ypredplot=p3)
}
View(glist)
glist[[9]]$bgplot
glist[[1:2]]$bgplot
grid.arrange(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot)
grid.arrange(c(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot))
do.call("grid.arrange", glist$bgplot)
do.call("grid.arrange", c(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot))
grid.arrange(grob=c(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot))
ls <- glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot
ls <- c(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot)
do.call('grid.arrange', ls)
ls
ls[1]
ls[[1]]
grid.arrange(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot,
glist[[4]]$bgplot, glist[[5]]$bgplot, glist[[6]]$bgplot,
glist[[7]]$bgplot, glist[[8]]$bgplot, glist[[9]]$bgplot)
grid.arrange(glist[[1]]$ypredplot, glist[[2]]$ypredplot, glist[[3]]$ypredplot,
glist[[4]]$ypredplot, glist[[5]]$ypredplot, glist[[6]]$ypredplot,
glist[[7]]$ypredplot, glist[[8]]$ypredplot, glist[[9]]$ypredplot)
grid.arrange(glist[[1]]$sgplot, glist[[2]]$sgplot, glist[[3]]$sgplot,
glist[[4]]$sgplot, glist[[5]]$sgplot, glist[[6]]$sgplot,
glist[[7]]$sgplot, glist[[8]]$sgplot, glist[[9]]$sgplot)
glist[[3]]$n
grid.arrange(glist[[1]]$sgplot, glist[[2]]$sgplot, glist[[3]]$sgplot,
glist[[4]]$sgplot, glist[[5]]$sgplot, glist[[6]]$sgplot,
glist[[7]]$sgplot, glist[[8]]$sgplot, glist[[9]]$sgplot)
grid.arrange(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot,
glist[[4]]$bgplot, glist[[5]]$bgplot, glist[[6]]$bgplot,
glist[[7]]$bgplot, glist[[8]]$bgplot, glist[[9]]$bgplot)
grid.arrange(glist[[1]]$ypredplot, glist[[2]]$ypredplot, glist[[3]]$ypredplot,
glist[[4]]$ypredplot, glist[[5]]$ypredplot, glist[[6]]$ypredplot,
glist[[7]]$ypredplot, glist[[8]]$ypredplot, glist[[9]]$ypredplot)
grid.arrange(glist[[1]]$bgplot, glist[[2]]$bgplot, glist[[3]]$bgplot,
glist[[4]]$bgplot, glist[[5]]$bgplot, glist[[6]]$bgplot,
glist[[7]]$bgplot, glist[[8]]$bgplot, glist[[9]]$bgplot)
grid.arrange(glist[[1]]$sgplot, glist[[2]]$sgplot, glist[[3]]$sgplot,
glist[[4]]$sgplot, glist[[5]]$sgplot, glist[[6]]$sgplot,
glist[[7]]$sgplot, glist[[8]]$sgplot, glist[[9]]$sgplot)
pacman::p_load(ggplot2, gridExtra, RColorBrewer)
for(j in 1:4){
i <- ii[j]
wi <- which(colnames(yPredMu) == i)
zj <- yPredSe[,i]/(yPredMu[,i] + .01)
values2contour(xx=predGrid[,'lon'],yy=predGrid[,'lat'],
z=zj,nx=ngrid,ny=ngrid,col=colm,
zlevs=slevs,lwd=.1,add=F,fill=T)
maps::map(boundary=T,col='grey',lwd=2,xlim=mapx,ylim=mapy,add=T)
ydat <- out$inputs$y[,wi]*1000  # per 1000 hrs effort
ydat <- ydat/max(ydat,na.rm=T)
colj <- .getColor('darkblue',ydat)
symbols(xdata$Longitude, xdata$Latitude, circles=ydat, inches=F, add=T,
fg = colj, bg = colj)
title(i)
}
pacman::p_load(ggplot2, gridExtra, RColorBrewer, MBA)
par(mfrow=c(2,2), mar=c(1,1,3,2), bty='n')
ngrid <- 30
colM <- colorRampPalette(brewer.pal(5,'YlOrRd'))
qlev <- seq(0,1,length=10)
zlevs <- quantile(yPredMu,qlev)
sig    <- .9
mu     <- 3.1
offset <- -2
par(mfrow = c(1, 2), bty = 'n', mar = c(4, 5, 3, .1), cex=1.2, family='serif')
part <- c(0, 2.2, 3.3, 4.5, 6.6)
w    <- seq(-1, 7, length = 1000)
dw   <- dnorm(w, mu, sig)
dp   <- dw[ findInterval(part, w) ]
pw   <- pnorm(part, mu, sig)
pw[-1] <- diff(pw)
plot(w, 2*dw - .5, type = 'l', ylim = c(-.5, 4), yaxt = 'n',
ylab = expression(paste(italic(y), '|', italic(w), ', ', bold(p),
sep = '')),
xlab = expression(paste(italic(w), '|', bold(x), ', ', bold(beta),
', ', bold(Sigma), sep = '')),
xlim = c(offset, 7), lwd = 2)
axis(2, at = c(0:5))
db <- .15
int <- 4
polygon( c(w, rev(w)), 2*c(dw, w*0) - .5, col = 'grey', lwd = 2)
lines(c(-1, part[1]), c(0, 0), lwd = 2)
for(j in 1:(length(part))){
lines( part[j:(j+1)], c(j, j), lwd = 3)
ww <- which(w >= part[j] & w <= part[j+1])
if(j == 3){
w1 <- ww[1]
w2 <- max(ww)
arrows( mean(w[ww]), 2*max(dw[ww]) - .4, mean(w[ww]),
j - .4, angle = 20, lwd = 5, col = 'grey', length = .2)
arrows( w[w1] - .5 , j , -.7, j , angle = 20,
lwd = 5, col = 'grey', length = .2)
text( c(w[w1], w[w2]), c(3.3, 3.3),
expression(italic(p)[4], italic(p)[5]), cex=.9)
text( w[w2] + .3, .6, expression( italic(w)[italic(is)] ))
text( 0, 3.5, expression( italic(y)[italic(is)] ))
}
coll <- 'white'
if(j == int)coll <- 'grey'
rect( offset, j - 1 - db, 2*pw[j] + offset, j - 1 + db,
col = coll, border = 'black', lwd = 2)
}
ww <- which(w >= part[int - 1] & w <= part[int])
abline(h = -.5, lwd = 2)
title('a) Data generation', adj = 0, font.main = 1, font.lab = 1, cex=.8)
plot(w, 2*dw - .5, type = 'l', ylim = c(-.5, 4), yaxt = 'n',
ylab = expression(italic(y)),
xlab = expression(paste(italic(w), '|', italic(y), ', ', bold(p), sep = '')),
xlim = c(offset, 7), lwd = 2, col = 'grey')
axis(2, at = c(0:5))
abline(h = -.5, lwd = 2, col = 'grey')
wseq <- c(-10,part)
for(j in 1:(length(part))){
coll <- 'white'
border <- 'grey'
if(j == int){
coll <- 'grey'
border <- 'black'
rect( offset, j - 1 - db, 2*pw[j] + offset, j - 1 + db,
col = 'black', border = 'black')
}
lines( part[j:(j+1)], c(j, j), lwd = 3)
lines(part[c(j, j)], 2*c(0, dp[j])-.5, col = 'grey')
}
lines(c(-1, part[1]), c(0, 0), lwd = 2)
ww <- which(w >= part[int - 1] & w <= part[int])
polygon( w[c(ww, rev(ww))], 2*c(dw[ww], ww*0) - .5, col = 'grey', lwd = 2)
arrows( mean(w[ww]),  int - 1.3, mean(w[ww]),  2*max(dw) - .5,
angle = 20, lwd = 5, col = 'grey', length = .2)
arrows( -.5,  int - 1, min(w[ww]) - .4, int - 1, angle = 20,
lwd = 5, col = 'grey', length = .2)
title('b) Inference', adj = 0, font.main = 1, font.lab = 1, cex=.8)
newdata <- list(xdata = predGrid, nsim = 100)
list.files('../dataFile')
list.files('../dataFiles')
list.files('..')
setwd()
setwd('/Users/margaretswift/Documents/2020_Spring/BIO665/BIO665_git
')
setwd('~/Users/margaretswift/Documents/2020_Spring/BIO665/BIO665_git
')
getwd()
setwd('Documents/2020_Spring/BIO665/BIO665_git
')
setwd('Documents/2020_Spring/BIO665/BIO665_git')
list.files()
list.files('dataFiles')
load('dataFiles/fiaSpBayes.Rdata')
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, cache=FALSE)
pacman::p_load(ggplot2, gridExtra, RColorBrewer, MBA)
source('../clarkfunctions2020.R')
Rcpp::sourceCpp('../cppFns.cpp')
load()
p1      <- gjamPredict(out, newdata = newdata)
newdata <- list(xdata = predGrid, nsim = 100)
load('dataFiles/BBSeast.Rdata')
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, cache=FALSE)
pacman::p_load(ggplot2, gridExtra, RColorBrewer, MBA)
source('../clarkfunctions2020.R')
Rcpp::sourceCpp('../cppFns.cpp')
load('../dataFiles/BBSeast.Rdata')
load('../dataFiles/fiaSpBayes.Rdata')
#----------------------------------------------------------------------------
# FUNCTIONS
# put functions here
newdata <- list(xdata = predGrid, nsim = 100)
p1      <- gjamPredict(out, newdata = newdata)
?symbols
?maps::map
View(predGrid)
View(xdata)
#----------------------------------------------------------------------------
# LOADING
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, cache=FALSE)
pacman::p_load(ggplot2, gjam, gridExtra, RColorBrewer, reshape2)
source('../clarkfunctions2020.R')
Rcpp::sourceCpp('../cppFns.cpp')
# any libraries and data here
#----------------------------------------------------------------------------
# FUNCTIONS
# put functions here
sg <- suppressMessages(.updateWishart(x, y, df, beta=bg, IXX=IXX)$sigma)
.updateWishart(x, y, df, beta=bg, IXX=IXX)$sigma
