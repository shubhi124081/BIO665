colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
# parameters
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
# latent variables by site
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
# variances
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
# missing observations
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
#-------------------------------------------------------------------------------
# Latent states plots
keep  <- 200:ng
.processPars(vgibbs[keep,],xtrue=c(sigM,tauM),DPLOT=T, burnin = 200)
}
?.processPars
.processPars
sigM <- .1
tauM <- .1
ng     <- 2000
keep  <- 200:ng
plots <- list()
wts <- c(1e3, 1e5, 1e8)
for (i in 1:length(wts)) {
wt <- wts[i]
sp <- varPrior(sigM, wt)
tp <- varPrior(tauM, wt)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
plots[i] <- .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
.processPars(vgibbs[keep,],xtrue=c(sigM,tauM),DPLOT=T, burnin = 200)
}
ng     <- 2000
keep  <- 200:ng
plots <- list()
wt <- nt
priors <- c(0.1, 0.4, 0.7)
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, wt)
tp <- varPrior(tauM, wt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
.processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
}
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- range(bk)
ymax <- 8/diff(xlim)
plot(NULL, xlim=xlim,ylim=c(0,ymax),xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- range(bk)
ymax <- 8/diff(xlim)
plot(NULL, xlim=xlim,ylim=c(0,ymax),xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- range(bk)
ymax <- 8/diff(xlim)
plot(NULL, xlim=xlim,ylim=c(0,ymax),xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
xlims <- c(c(-0.03, 0.025), c(-0.0005, 0.002))
range(bk)
xlims
xlims <- data.frame(c(-0.03, 0.025), c(-0.0005, 0.002))
xlims
xlims <- data.frame(temp=c(-0.03, 0.025), cl=c(-0.0005, 0.002))
xlims
i
k
xlims[,k]
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
xlims <- data.frame(temp=c(-0.03, 0.025), cl=c(-0.0005, 0.002))
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- xlims[,k]#range(bk)
ymax <- 8/diff(xlim)
plot(NULL, xlim=xlim,ylim=c(0,ymax),xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
xlims <- data.frame(temp=c(-0.03, 0.025), cl=c(-0.0005, 0.002))
ylims <- data.frame(temp=c(0, 200), cl=c(0, 3500))
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- xlims[,k]#range(bk)
ymax <- ylims[,k]#8/diff(xlim)
plot(NULL, xlim=xlim,ylim=c(0,ymax),xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
xlims <- data.frame(temp=c(-0.03, 0.025), cl=c(-0.0005, 0.002))
ylims <- data.frame(temp=c(0, 200), cl=c(0, 3500))
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- xlims[,k]#range(bk)
ymax <- ylims[,k]#8/diff(xlim)
plot(NULL, xlim=xlim,ylim=ylim,xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
ylims
xlim <- xlims[,k]#range(bk)
ymax <- ylims[,k]#8/diff(xlim)
plot(NULL, xlim=xlim,ylim=ylim,xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
ng     <- 2000
keep  <- 200:ng
priors <- c(0.1, 0.4, 0.7)
xlims <- data.frame(temp=c(-0.03, 0.025), cl=c(-0.0005, 0.002))
ylims <- data.frame(temp=c(0, 200), cl=c(0, 3500))
for (i in 1:length(priors)) {
sigM <- tauM <- priors[i]
sp <- varPrior(sigM, nt)
tp <- varPrior(tauM, nt/5)
sg <- 1/rgamma(1,sp[1],sp[2])     #initialize variance values
tg <- 1/rgamma(1,tp[1],tp[2])
bg <- matrix(0,q,1)
tmp <- initialStatesSS(y)         #initial missing y
xg  <- tmp$x
#-------------------------------------------------------------------------------
# Gibbs Sampling
vgibbs <- matrix(0, ng, 2)
xgibbs <- matrix(0, ng, nt)
bgibbs <- matrix(0, ng, q)
zgibbs <- matrix(0, ng, length(missz))
colnames(vgibbs) <- vnames
colnames(bgibbs) <- xnames
for(g in 1:ng){
bg <- .updateBeta(z[prows,], xg[rrows] - xg[prows], sigma=sg,
priorIVB=diag(.001,q), priorB=matrix(0,q)) #
mu <- z%*%bg  # mean vector
for(j in 1:ngroup){
jj <- first[j]:last[j]
xg[jj] <- updateSSRW(states=xg[jj], yy=y[jj], zb=mu[jj], missing=missY[[j]],
tg=tg, sg=sg)
}
sg <- updateVariance(xg[rrows],xg[prows] + mu[prows],sp[1],sp[2])
tg <- updateVariance(y[-missy],xg[-missy],tp[1],tp[2])
z[missz] <- imputeX( missx = missz, xx = z[prows,],
yy = xg[prows] - xg[rrows],
bg = bg, sg, priorx )[missz]
vgibbs[g,] <- c(sg,tg)
xgibbs[g,] <- xg
bgibbs[g,] <- bg
zgibbs[g,] <- z[missz]
}
# .processPars(bgibbs[keep,],xtrue=bg*0,DPLOT=T, burnin = 200)
vars <- c('Temp', 'Cl')
par(mfrow=c(2,1), bty='n', mar=c(4,4,2,2))
sites <- levels(data$Site)
for(k in 1:2){
wk <- grep(vars[k],colnames(bgibbs))
bk <- bgibbs[keep,wk]
xlim <- xlims[,k]#range(bk)
ylim <- ylims[,k]#8/diff(xlim)
plot(NULL, xlim=xlim,ylim=ylim,xlab=vars[k],ylab='Density')
for(j in 1:ncol(bk)){
dk <- density(bk[,j])
lines(dk[[1]],dk[[2]],col=j, lwd=2)
wmax <- which.max(dk[[2]])
text( dk[[1]][wmax], 1.2*dk[[2]][wmax], sites[j] ,col=j)
}
}
}
head(y)
var(y)
var(data[,ynames[1]]  )
var(y, rm.na=T)
?var
var(y, na.rm=T)
round(var(y, na.rm=T), 2)
